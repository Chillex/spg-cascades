#version 430 core

// work on triangles
// subdivide into equal length segments
// emmit in counter-clockwise order
layout (triangles, equal_spacing, ccw) in;

uniform mat4 view;
uniform mat4 projection;

in CP_OUT
{
  vec3 position;
  vec3 normal;
  vec2 texCoords;
} cp_in[];

out TES_OUT
{
  vec3 position;
  vec3 normal;
  vec2 texCoords;
} tes_out;

vec2 interpolate2D(vec2 v0, vec2 v1, vec2 v2)
{
  return vec2(gl_TessCoord.x) * v0 + vec2(gl_TessCoord.y) * v1 + vec2(gl_TessCoord.z) * v2;
}

vec3 interpolate3D(vec3 v0, vec3 v1, vec3 v2)
{
  return vec3(gl_TessCoord.x) * v0 + vec3(gl_TessCoord.y) * v1 + vec3(gl_TessCoord.z) * v2;
}

void main()
{
  // interpolate control points based on barycentric coordiantes (weights in the triangle)
  tes_out.position = interpolate3D(cp_in[0].position, cp_in[1].position, cp_in[2].position);
  tes_out.normal = normalize(interpolate3D(cp_in[0].normal, cp_in[1].normal, cp_in[2].normal));
  tes_out.texCoords = interpolate2D(cp_in[0].texCoords, cp_in[1].texCoords, cp_in[2].texCoords);

  gl_Position = projection * view * vec4(tes_out.position, 1.0f);
}
